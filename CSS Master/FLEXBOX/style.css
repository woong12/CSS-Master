.father {
    display: flex;
    /* flex-direction: row; */
    /* Main Axis */
    justify-content: space-around;
    /* Cross Axis */
    /* align-content: space-around; */
    /* height: 200vh; */
    /* flex-wrap: wrap; */
    height: 100vh;
    width: 100%;
}

.child {
    flex-basis: 30%;
    /* height: 200px; */
    background: peru;
    color: white;
    font-size: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.child:nth-child(2) {
    background: black;
    flex-grow: 1;
}

/* 
flex의 세계에는 두 가지가 있다.

1. row(행): 가로를 의미한다.
2. column(열): 세로를 의미한다.

flex container의 flex-direction 기본 값은 row다. 
이때 해당 row에 있는 item의 위치를 변경시키기 위해서는 justify-content를 사용하는데 
수평 축에 있는 flex children의 위치를 변경한다. 
(flex container에서는 부모가 자식의 위치를 변경한다는 것이 저번 수업의 핵심 내용이었다.)

이제 수평 축에 main-axis라는 멋드러진 이름을 붙여주자. 
이 이름을 적용시켜 위 예시를 다시 생각해보면 다음과 같다.

flex-direction의 기본 값이 row일 때 수평축이 곧 main-axis다. 
다시 말해 가로가 곧 main-axis인 것이다.
이때 main-axis에서 justify-content를 사용하면 item을 움직일 수 있는 것인데 
main-axis가 수평축, 가로이기 때문에 가로로 item이 움직인다.

다른 axis로는 cross-axis가 존재한다. 
flex container가 row을 가질 때 cross-axis는 단어 그대로 가로지르기 때문에 수직(vertical)이다.
이때 cross-axis에서 item을 움직이기 위해서는 align-content를 사용한다. 수직, 세로로 움직이는 것이다.

이는 차후 direction을 배울 때 매우 중요하므로 main-axis와 cross-axis 용어 및 개념을 잊지 말자.

align-center를 사용할 때는 반드시 flex container(부모)의 높이가 어느 정도 되는지 반드시 확인하자. 
이미 item과 높이가 동일하여 위치를 변환시킬 수 없는 경우가 많기 때문이다.

------------------------------------------------------------------------

flex direction 의 기본방향은 row (가로)
row방향일때 : main axis =가로(justify-content) / Cross axis=세로(align-items)
column방향일때 : main axis=세로(justify-content) / Cross axis=가로(align-items) 

------------------------------------------------------------------------

부모가 아닌 자식 아이템의 위치(position)를 직접 변경하고 싶을 때는 align-self와 order를 사용한다. 
이때 유의할 점은 부모의 높이(heigth)가 설정되어 있어야 한다.

align-self는 align-item과 같이 동작한다. 
다시 말해 cross axis 방향에 있는 item의 위치를 바꾸게 된다.

order의 경우 단어 그대로 순서를 바꾼다. 
이때 기본 값(default)는 0이라 order를 1로 줄 경우 order를 주지 않은 것보다 뒤에 위치하게 된다. 
HTML을 통해 순서를 바꾸기 힘들 때 사용하면 좋다.
--------------------------
.child:nth-child(1) {
    order: 2;
    align-self: center;
}

.child:nth-child(2) {
    order: 3;
}
--------------------------
------------------------------------------------------------------------

1.5 wrap, nowrap, reverse, align-content
- father, child 모두 flex로 해주면 child에 있던 글자가 중앙에 위치하게 됨

1) flex-wrap
- flexbox는 width보다도, '같은 줄'에 있도록 하는 것을 우선시함
-> flex-wrap: wrap; (child의 사이즈를 유지하라고 하는 것)
-> nowrap; (child를 모두 같은 줄에 정렬함, 이때 width가 줄어들 수 있음)

2) reverse
- flex-direction: row-reverse; (오른쪽에서부터 1이 시작)
- column-reverse;
- flex-wrap: wrap-reverse; (한 줄이 되지 않아도 아래에서 위로 정렬되게)

* wrap으로 정렬 시 (여러 줄으로, 각 item의 width를 유지하면서)
각 줄(기본: row) 간의 간격이 생기는데, 이것을 'align-content'라는 property로 조절 가능

3) align-content (line을 변경, line은 cross-axis에 있는 상태)
- justify-content와 비슷하지만 'line'에 관한 것 
(각 block이 여러 행에 걸쳐 나올 때, 행간 공백을 얼마나 둘 건지?)
- align-content: flex-start; - align-content: space-around;
------------------------------------------------------------------------

1) flex-shrink: flexbox가 쥐어짤 때, element의 행동의 정의함
ex) flex-wrap: nowrap일때, 화면이 작아지면 width가 설정되어있어도 줄어들지.
- flex-shrink: 1; - flex-shrink: n(정수); --> 여러 개 element 중 특정 element만 덜 줄어들거나, 
더 줄어들게 할 수 있음!!

2) flex-grow: shrink와 반대, 화면이 늘어남에 따라 box 크기가 얼마나 늘어날까?
- flex-grow: 1; - flex-grow: 0; - 남아있는 공간을 가져옴 (space를 없애고)
-> 즉, 남아있는 공간, 여백이 있을 때만 grow 가능
=> 화면이 커질 때, element도 함께 커지길 원할 때 사용할 수 있음
=> flex-grow property가 0인 상태거나, 따로 정의되지 않았다면, 
화면이 커져도 각 element 크기가 커지지 않음
(여백만 늘어나게 됨)

------------------------------------------------------------------------

flex-basis CSS 속성은 플렉스 아이템의 초기 크기를 지정합니다. 
box-sizing을 따로 지정하지 않는다면 콘텐츠 박스의 크기를 변경합니다.
+ flex-basis의 크기는 main axis를 기준으로 아이템들의 크기를 변경한다.

------------------------------------------------------------------------

*/
