body {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
        Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
        sans-serif;
}

.grid {
    display: grid;
    color: white;
    gap: 5px;
    grid-template-columns: repeat(4, 100px);
    /* grid-auto-rows: 100px; */
    grid-template-rows: repeat(4, 100px);
    grid-auto-flow: column;
    grid-auto-columns: 100px;
}

.item:nth-child(odd) {
    background-color: #2ecc71;
}

.item:nth-child(even) {
    background-color: #3498db;
}

/* 
grid 생성은 flexbox 생성과 동일하게 부모 요소에서 진행한다.

grid-template-columns는 열의 개수와 열의 너비를 결정하는 property,
grid-template-rows는 행의 개수와 행의 높이를 결정하는 property이다.
column 사이에 공백을 주고 싶다면 column-gap,
row 사이에 공백을 주고 싶다면 row-gap,
column 사이와 row 사이에 동일한 공백을 주고 싶다면 gap을 사용하면 된다. 

-------------------------------------------------------------------------------

[grid-template-areas와 비슷한 기능을 하는 속성, 자식 grid에 명시한다.]
1)grid-column-start
2)grid-column-end
3)grid-row-start
4)grid-row-end
해당 속성은 정수인 숫자가 들어가며, 1부터 column(row)의 최대갯수 + 1까지 사용 가능하다.
범위를 초과하게 되면 css가 망가져서 생각한 대로 동작하지 않게 되니 꼭 명심하자.. 
참고로 상대단위(%, auto)등은 안 먹히는 듯 하다.

-------------------------------------------------------------------------------

(grid-column-start: 1;
grid-column-end: 4;)
=> grid-column: 1 / 4로 바꿔서 표현 할 수 있다
또, grid-column: 1 / -1하면 첫line부터 마지막 line까지 설정(맨 뒷줄부터 -1, -2... )
+
span => span은 얼만큼의 공간을 차지하는지 보여줌
gird-column: span 2; => 2열의 공간을 차지함.
grid-row: span 2; => 2행의 공간을 차지함.
but 시작line과 끝line을 표현하지 않음. 다른 요소와 관계를 봐야함
ex)
nav태그에서 grid-row: 1 / 3; 으로 되어있고,
content태그에서 grid-row: span 2;이면 content가 표현되지 않음
시작점이 없기 때문.

-------------------------------------------------------------------------------

fr(fraction)은 사용 가능한 공간을 의미한다. 즉 기본적으로 가능한 만큼의 공간을 차지한다.
fr은 전역으로 결정되는 것이 아닌 grid container에서 결정된다(여기서는 .grid)
따라서 fr을 쓰기 위해서는 grid container에 height을 명시해야 한다. 
이는 더이상 px등의 절대단위를 사용하지 않게끔 해주는 좋은 단위이다.

[grid-template]
"...cellNames(grid-area)" (row크기)
...
"...cellNames(grid-area)" (row크기)/ (각 column의 크기 [repeat()은 쓸 수 없다])

-------------------------------------------------------------------------------

justify-items: defalut=stretch (gird 부모(container)는 자식을 늘려서 부모를 채우게 함)
속성: start, center, end

align-items: default=stretch
속성: start, center, end
=> *둘 모두 grid container에서 적용

만약 요소에 크기를 지정했다면 stretch 되지 않음.
+
shortcut
place-items: stretch center (vertical horizon)

-------------------------------------------------------------------------------

[place content]
- Justify-content : start; (그리드가 놓이는 위치를 뜻하며 기본은 start)
- Align-content는 수직적으로 그리드를 움직이는 것
- Start, end, space-evenly, space-around, space-between 사용
- 컨테이너의 height가 그리드를 담을 만큼 충분해야한다.(높이 지정)
- Grid-template에서 높이를 fr로 설정하고 align-content를 stretch로 설정하면 쭉 늘어난다.
- Place items와 마찬가지로 place-content를 통해 수직 수평으로 그리드 이동가능(첫번째가 수직, 두번째 옵션이 수평)
- Place-items는 셀안에서 항목이 이동하는 것이며, place-content는 그리드가 이동하는 것이다.

-------------------------------------------------------------------------------

// VScode에서 항목 여러 개 생성하기 :
.item*20>{$}
$ 20개 생성($는 20까지의 정수를 순차적으로)
[auto columns and rows]
- 세팅해둔 그리드행보다 더 많은 데이터를 불러올 경우가 있다. (재사용성이 떨어짐)
- 자동으로 할당하도록 설정한다면 그리드의 재사용성을 높일 수 있다.
- Grid-template-rows: repeat(4, 100px);
- Grid-auto-rows: 100px;
- 위 같은 상황이면 4줄까지는 계획, 그 이후는 해당 높이로 자동 설정된다.
- Grid-auto-flow: column; -> 열 방향으로 추가 항목 형성
- Grid-auto-flow: row; -> 기본값, 추가 데이터값이 행으로 생김

-------------------------------------------------------------------------------


*/
